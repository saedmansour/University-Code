;---------------------------------------------------------------------------------------------------------------------------------
;********************************************************************************
;*
;*				EXERCISE 4 
;*
;********************************************************************************
;---------------------------------------------------------------------------------------------------------------------------------





;---Constants----------------------------------------------------------------------------------------------------------------
TKS = 177560
TKB = 177562
TPS = 177564
TPB = 177566
CLS = 177546
;---------------------------------------------------------------------------------------------------------------------------------




;----Interrups--------------------------------------------------------------------------------------------------------------------	
;----keybord vector
	.= torg + 60
kbFunc:
	.word get_char
	.word 300

	
;----clock vector
	. = torg + 100
	.word clock
	.word 300
;---------------------------------------------------------------------------------------------------------------------------------



;---------------------------------------------------------------------------------------------------------------------------------
;									   MAIN
;---------------------------------------------------------------------------------------------------------------------------------
.= torg + 2000
main:
	;<initialize stack>
	mov pc, sp
	tst -(sp)
	;</initialize stack>
	
	
	clr @#CLS	;disable clock interrupt
	clr @#TKS
	clr r4		;flag for no_yes
	
	mov #str1, -(sp)
	jsr pc, print_str
	tst (sp)+

	mov #player1Name, -(sp)
	jsr pc, input
	tst (sp)+
	
	mov #str2, -(sp)
	jsr pc, print_str
	tst (sp)+

	mov #gameLen, -(sp)
	jsr pc, input
	tst (sp)+
	
	mov #gameLen, -(sp)
	jsr pc, charToInt
	tst (sp)+
	mov r3, intGameLen	;now in intGameLen the int
	clr r4
	
	mov #str3, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #maxGen, -(sp)
	jsr pc, input
	tst (sp)+
	
	mov #maxGen, -(sp)
	jsr pc, charToInt
	tst (sp)+
	mov r3, intMaxGen	;now in intMaxGen the int
	clr r4
	
	mov #str4, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #1., r4
	mov #answer, -(sp)
	jsr pc, input
	tst (sp)+
	clr r4
	
	cmpb answer, #'Y
	beq convertBoard
	
tryAgain:
	mov #str5, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #inputBoard, -(sp)
	jsr pc, input
	tst (sp)+
	
	mov #inputBoard, -(sp)
	jsr pc, countBytes
	tst (sp)+
	mov r0, numBytes
	
	mov #inputBoard, -(sp)
	jsr pc, replaceComma
	tst (sp)+
	
	mov numBytes, r2
	mov #inputBoard, -(sp)
	mov #Init_A, -(sp)
	jsr pc, convertToRl
	cmp (sp)+, (sp)+
	
	mov #stBoard, -(sp)				;if answer was no
	jsr r5, rle2st			
	.word Init_A			
	tst (sp)+	
	tst r0							;r0 contains if array is valid or not
	bne validArr
	
	mov #11., -(sp)		;array length in words
	mov #Init_A, -(sp)
	jsr pc, clrArr
	cmp (sp)+, (sp)+
	
	mov #str5Err, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	br tryAgain 
convertBoard:						;if answer was yes
	mov #stBoard, -(sp)	
	jsr r5, rle2st			
	.word Init_B			
	tst (sp)+	
validArr:	
	mov #10., r5	;newline
	jsr pc, putc
	
	mov #stBoard, -(sp)
	jsr pc, printBoard
	tst (sp)+
	
	mov #80., -(sp)
	jsr pc, emptyLines
	tst (sp)+
	
	mov #str6, -(sp)
	jsr pc, print_str
	tst (sp)+

	mov #player2Name, -(sp)
	jsr pc, input
	tst (sp)+
	
	mov #strTime, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #gameLen, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strSec, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #10., r5	;newline
	jsr pc, putc
	
	mov #strGen, -(sp)
	jsr pc, print_str
	tst (sp)+

	mov #maxGen, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #10., r5	;newline
	jsr pc, putc
	
	mov #strPrs, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #2., r4	;2 preses any key case
	mov #answer, -(sp)
	jsr pc, input
	tst (sp)+
	clr r4
	

DoNextGen: 
	mov #strCur, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #stBoard, -(sp)
	jsr pc, printBoard
	tst (sp)+
	
	mov #strMv, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	
	;<clock info="turn on clock, clock only turned on here because we count only when he's thinking on next move">
	mov #100, @#CLS
	
	mov #move, -(sp)
	jsr pc, getMove
	tst (sp)+
	
	;<newLine>
	mov #10., r5
	jsr pc, putc
	;</newLine>
	
	clr @#CLS
	;</clock>
	
	
	mov #stBoard, -(sp)
	mov #move, -(sp)
	jsr pc, chgCell
	cmp (sp)+, (sp)+
	

	mov #stBoard, -(sp)					;push first parameter to next_gen = &input_array[]
	mov #outputBoard, -(sp)				;push second parameter to next_gen = &output_array[]
	jsr pc, next_gen
	cmp (sp)+, (sp)+					;adjust sp
	
	
	;after this: outputBoard is copied to stBoard, in r0 we would return if outputBoard is all dead r0 = 1 <=> GAME OVER
	mov #stBoard, -(sp)					;push first parameter to next_gen = &input_array[]
	mov #outputBoard, -(sp)				;push second parameter to next_gen = &output_array[]
	jsr pc, copyBoard
	cmp (sp)+, (sp)+					;adjust sp
	
	tst r0 
	beq continue
	
	;< else { GaME OVER}	>		
	mov #strS1, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #player2Name, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strS2, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	halt			;game over
	;</else>
	
continue:	
	dec intMaxGen
	bne DoNextGen						;if not zero

	;<game_over reason="No more generations">
	mov #strE21, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #player2Name, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strE22, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #player1Name, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strE13, -(sp)
	jsr pc, print_str
	tst (sp)+
	;</game_over>	
	
main_end:	
	halt
;---------------------------------------------------------------------------------------------------------------------------------
;									MAIN END
;---------------------------------------------------------------------------------------------------------------------------------
	
	
	
	

;-------------------------------------------------------------------------------------------------------------------------------
copyBoard:
	mov r1, -(sp)
	mov r2, -(sp)
	mov r3, -(sp)
	
	mov 8.(sp), r1	;copied from
	mov 10.(sp), r2  ;copy to
	mov #144., r3
	mov #1, r0			;flag, return it. if = 1 then  array all zeros
	
copyNX:
	tstb (r1)
	beq notOne
	clr r0
notOne:	
	movb (r1)+, (r2)+	
	sob r3, copyNX
	
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
;-------------------------------------------------------------------------------------------------------------------------------
;NEXT GENERATION FUNCTION
			
			
;mov #input_array, -(sp)
;mov #output_array, -(sp)
;Stack image:
;
;9r5
;8r4
;7r3
;6r2
;5r1
;4r0
;3pc
;2output_array
;1input_array

next_gen:
	mov r0, -(sp)				;store register values to restore at end	
	mov r1, -(sp)	
	mov r2, -(sp)	
	mov r3, -(sp)
	mov r4, -(sp)
	mov r5, -(sp)
	mov 16.(sp), inputN			;input_array
	mov 14.(sp), outputN			;output_array

	
							; ---- <registeres usage> ----
							;note: this is the common usage
							;if usage changed, there's a comment on it.
	clr r0					;r0 row number (i)
	clr r1	 				;r1 column number (j)
	clr r2					;  
	clr r3					;r3 = &a[i][j]
	clr r4					;r4 = number of alive neighbours
	clr r5					;r5 = state of a[i][j] in next generation
							; ---- </registeres usage> ----	
	

;--The main part of the progrram--------------------------------------

;loop_gen: A jump to loop_gen causes the next cell in the matrix to be handled	
loop_gen:						
	clr r4					;r4 = 0, to count neighbours for every cell

;----calculate a[i][j], result in r2. to decide if dead or alive------

	mov r0, r3				;r3 = i: r3 would eventually contain: &inputN[i][j]
	mul #12., r3			;r3 = i*12: Mul puts result in one register if register index is odd (r3, 3 odd)
							;16 bits are enough since: max(r3) almost equals 5000(oct) + 12*12(dec) = 
							;101010010000 (binary), which is 12 bits of length => not over 16 bits.
	add r1, r3				;r3 = i*12 + j
	mov r3, offset			;so would be later used to calculute i*12 + j + outputN
	add inputN, r3   		;r3 = i*12 + j + inputN: Address now in r3
	movb @r3, is_alive		;is_alive = inputN[i][j]
;---------------------------------------------------------------------



;--calculate how many neighbours are alive----------------------------
;	There are 8 neighbours:
;		&[i][j]	+ 12	&[i][j] + 12 + 1
;		&[i][j]	- 12	&[i][j] - 12 - 1
;		&[i][j]	+ 1		&[i][j] + 12 - 1
;		&[i][j]	- 1		&[i][j] - 12 + 1
;
;r2 is used here to contain inputN[i][j] that is 0/1
;A skip is done everytime a cell has no neighbour in the case that is
;calculated.
;r3 would cotain the address of every neighbour
		
		clr r5		
		cmp r0, #11.		;if last line in matrix skip this. Case: +12
		beq skip1_f		
		movb 12.(r3), r2	;r2 used as a mid register
							;case &a[i][j]+12	
		add r2, r4			;add to counter
		
skip1_f:	
		cmp r0, #0.
		beq skip2_f			;if first line in matrix skip this. Case: -12
		movb -12.(r3), r2
		add r2, r4
		
skip2_f:
		cmp r1, #0
		beq skip3_f			;if first column skip.
		movb -1.(r3), r2	;case &a[i][j]-1	
		add r2, r4
		
skip3_f:	
		cmp r1, #11.
		beq skip4_f			
		movb 1.(r3), r2		;case &a[i][j]+1
		add r2, r4
		
skip4_f:			
							;case +n+1			
		mov inputN, r5		
		add #130., r5		;130 = offset to inputN[10][10] in matrix	
		cmp r3, r5			;r5 = &inputN[10][10]
		bgt skip5_f
		movb 13.(r3), r2	;case &a[i][j]+12+1
		add r2, r4		
		
skip5_f:
		add #2., r5			;case +n-1, so last place to check with is +2 than the one in case +n+1
		cmp r3, r5			;r5 = &Init_B[11][0]
		bgt skip6_f
		movb 11.(r3), r2	;case &a[i][j]+12-1
		add r2, r4	
		
skip6_f:
							
		clr r5
		add inputN, r5		;last cell that is right from starting ones is &inputN + 13
		add #13., r5
		cmp r3, r5			;r5 = &Init_B[1][1]
		blt skip7_f
		movb -13.(r3), r2	;case &a[i][j]-12-1
		add r2, r4		
skip7_f:
		sub #2., r5			;case -n+1
		cmp r3, r5			;r5 = &Init_B[0][11]
		blt skip8_f
		movb -11.(r3), r2	;case &a[i][j]-12+1
		add r2, r4
		
skip8_f:		
;---------------------------------------------------------------------




;--If cell is alive---------------------------------------------------
	cmp is_alive, #0		;branch if cell is dead	
	beq dead				
	cmp r4, #2.				
	bge two					;branch if cell has two or more alive neighbours
	clr r5					;kill cell (less than two neighbours => lonliness => death)
	br set_val				;set the cell next generation's value
two:
	cmp r4, #3.
	bgt three				;branch if it has more than three alive neighbours
	movb #1, r5				;keep cell alive (number of alive neighbours between 2 and 3) 
	br set_val
three:
	clr r5					;kill cell (more than three neighbours => over density => death)	
	br set_val				;branch to avoid the "If cell is dead" section	 
;---------------------------------------------------------------------



;--If cell is dead----------------------------------------------------
dead:
	cmp r4, #3.				
	bne die					;stay_dead
	movb #1, r5				;if it has three alive neighbours it comes
							;back to life
	br set_val
die:
	clr r5
;---------------------------------------------------------------------



;--Set Value In Matrix-----------------------------------------------	
;<regiestrs_used>
;	r5 result
;	r2 destination address
set_val:
	mov offset, r2		
	add outputN, r2			;r2 = &outputN[i][j]
	movb r5, @r2			;r5 contains dead/alive, r6 contains the address
;---------------------------------------------------------------------



;--increment next index of matrix and jump if not finsihed to loop_gen
	inc r1					;j++
	cmp r1, #12.			;if(columns_num < 12)
	beq nx_l				;next_line
	jmp loop_gen			;handle next cell
nx_l:	
	clr r1					;j = 0	(first column in row)
	inc r0					;i++ (next row)	
	cmp r0, #12.			;while(j < 12)
	beq	end 			
	jmp loop_gen			;handle next cell
end:

	mov (sp)+, r5			;restore registers
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------
	
	

	
;---------------------------------------------------------------------------------------------------------------------------------	
getChMv:
	;r1 move array
	;r2 counter
	;r3 : ;flag = 0 invalid input,  flag = 1 just astreix , flag = 2 there are 3 charchters and *,  flag = 3 input not done
	
	movb @#TKB, (r1)
	cmpb (r1), #'*		
	beq Astrx
	
	;<print>
	tstb @#TPS
	bpl .-4
	movb (r1), @#TPB
	;</print>
	
	mov #3., r3			;becasue there was no astreix
	
	cmp r2, #3.
	bgt gchEnd
	inc r1	;save next cell
	br gchEnd
Astrx:
	tst r2
	bne notFirstAstrx
	mov #1., r3 		;if first time
	br gchEnd
notFirstAstrx:	
	cmp r2, #3.			;if more than three charchters were inputted
	ble valid
	clr r3				;invalid
	br gchEnd
valid:
	mov #2., r3			;3 charchters and *
gchEnd:	
	inc r2
	clr @#TKS					;disable interrupt so there won't be any interrupts between commands
	rts pc	
;-------------------------------------------------------------------------------------------------------------------------------
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------			
getMove:
	mov r0, -(sp)
	mov r1, -(sp)
	mov r2, -(sp)
	mov r3, -(sp)
	mov r4, -(sp)
	
	mov 12.(sp), r0	;input array address (the move)

getLoop:
	mov #3., r4
	mov r0, r1		;a copy of input array (to use if illegal move)
	clr r2			;counter
	mov #3., r3 			;flag = 0 invalid input,  flag = 1 just astreix , flag = 2 there are 3 charchters and *,  flag = 3 input not done
getStr:
	bis #101, @#TKS
	cmp r3, #3   			;interrupt will end when flag = 3
	beq getStr
	
	tst r3					;if zero invalid input
	beq invalid

	cmp r3, #1.
	beq gmEnd				;we should check the array for * only
	
	
	mov r0, -(sp)
	jsr pc, charToInt
	tst (sp)+
	mov r3, (r0)	;r3 contains the number
	
	cmp (r0), #217
	ble gmEnd 

invalid:	
	mov #10., r5	;newline
	jsr pc, putc
	
	mov #strIM, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	br getLoop
gmEnd:
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------

	
	
	
;---------------------------------------------------------------------------------------------------------------------------------			
chgCell:
	mov r0, -(sp)
	mov r1, -(sp)
	
	mov 8.(sp), r0	;array
	mov 6.(sp), r1	;move
	
	add (r1), r0
	tstb (r0)
	beq putOne
	movb #0., (r0)
	br skipPut
putOne:	
	movb #1., (r0)
skipPut:	
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------


	
	
;---------------------------------------------------------------------------------------------------------------------------------		
emptyLines:
		mov r1, -(sp)
		mov r5, -(sp)
		
		mov 6.(sp), r1
print_line:
		mov #10., r5
		jsr pc, putc
		sob r1, print_line
		
		mov (sp)+, r5
		mov (sp)+, r1
		rts pc
;-------------------------------------------------------------------------------------------------------------------------------


		
		
;---------------------------------------------------------------------------------------------------------------------------------		
printBoard:
	mov r0, -(sp)
	mov r1, -(sp)
	mov r2, -(sp)
	mov r5, -(sp)
	
	mov 10.(sp), r0	;input array
	
	mov #12., r2	;columns
lineLp:	
	mov #12., r1	;rows
columnLp:
	
	movb (r0)+, r5
	add #60, r5
	jsr pc, putc
	
	mov #' ,r5
	jsr pc, putc
	
	sob r1, columnLp
	
	mov #10., r5
	jsr pc, putc
	sob r2, lineLp
	
	
	mov (sp)+, r5
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------	




;---------------------------------------------------------------------------------------------------------------------------------	
putc:
	;<function_body>
	tstb @#TPS					
	bpl .-4								;wait while screen not done
	movb r5, @#TPB					;print
	;</function_body>	
	rts pc	
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------		
clrArr:
	mov r0, -(sp)
	mov r1, -(sp)
	
	mov 8.(sp), r0		;num of words
	mov 6.(sp), r1		;pointer to array
	
clrLoop:
	clr (r1)+
	sob r0, clrLoop
	
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------	
convertToRl:
	mov r0, -(sp)
	mov r1, -(sp)
	mov r3, -(sp)
	mov r4, -(sp)
	
	mov 12.(sp), r0		;input
	mov 10.(sp), r1		;output
	clr r3
	clr r4
	;r2 contains length
	
next_num:
	tst r2
	beq convertEnd
	mov r0, -(sp)
	jsr pc, charToInt
	tst (sp)+
	movb r3, (r1)+
	add r4, r0
	sub r4, r2
	br next_num
	
convertEnd:	
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------
;output in r0
countBytes:
	mov r1, -(sp)
	mov 4(sp), r1	;contains input array
	clr r0
nxByte:	
	inc r0
	cmpb (r1)+, #'*
	bne nxByte
	mov (sp)+, r1
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------
replaceComma:
	mov r0, -(sp)
	mov 4.(sp), r0	;r0 contains array to be replaced
replaceNx:	
	cmpb (r0), #'*
	beq rCEnd
	cmpb (r0), #',
	bne noReplace	;if not comma don't replace
	movb #'*, (r0)	;replace comma with astreix
noReplace:
	inc r0			;next char
	br replaceNx
rCEnd:	
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------	

	
	
	
;---------------------------------------------------------------------------------------------------------------------------------
get_char:
	;r4 = Y/N - Press any key  flag, r4 = 0 <=> with star, r4 = 1 <=> getting Y/N, r4 = 2 <=> press any key case, r4 = 3 <=> getMove
	;r1 = input array
	;r0 = flag

	cmp #3., r4
	bne skipGet
	jsr pc, getChMv		;special function for get_move
	br get_end
skipGet:	
	movb @#TKB, (r1)
	cmp #2., r4
	beq clr_flg
	tst r4						;check if we should get Y/N
	bne print_ch
	cmpb (r1), #'*
	beq clr_flg
print_ch:	
	tstb @#TPS	
	bpl .-4
	movb (r1)+, TPB
	tst r4
	beq get_end
clr_flg:
	clr r0						;flag
	clr @#TKS					;disable interrupt
get_end:	
	rti
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
;---------------------------------------------------------------------------------------------------------------------------------
clock:
	inc ticksNum
	cmp ticksNum, Rate
	bne clockEnd
	clr ticksNum
	inc secNum
	cmp secNum, intGameLen
	bne clockEnd	;clockEnd to stopping the game
	
	;Game Over
	
	mov #strE11, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #player2Name, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strE22, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #player1Name, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	mov #strE13, -(sp)
	jsr pc, print_str
	tst (sp)+
	
	halt
	
clockEnd:	
	rti
;-------------------------------------------------------------------------------------------------------------------------------
	
	
	
		
;---------------------------------------------------------------------------------------------------------------------------------
print_str:	
	mov r0, -(sp)
	;<function_body>
	mov 4(sp), r0						;string pointer - change to 6(sp) if rti
nxt_ch:
	cmpb (r0), #'*
	beq prints_end						;if printed all charchters of string, end
	tstb @#TPS					
	bpl .-4								;wait while screen not done
	movb (r0)+, @#TPB					;print and move to next charchter in string
	br nxt_ch
prints_end:
	;</function_body>
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------



	
;---------------------------------------------------------------------------------------------------------------------------------
;	-Function name: input
;	-Description: print string(until NULL charchter is reached)
;	-Input: address of string beginning in stack
;	-Link register: PC
;	
input:
	mov r0, -(sp)
	mov r1, -(sp)
	mov r5, -(sp)
	
	mov 8.(sp), r1	;input array address
	mov #1, r0		;flag
input_loop:
	bis #101, @#TKS
	tst r0			;interrupt will end when flag equals zero
	bne input_loop
	
	mov #10., r5	;newline
	jsr pc, putc
	
	mov (sp)+, r5
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
;-------------------------------------------------------------------------------------------------------------------------------		

		
		
		
;---------------------------------------------------------------------------------------------------------------------------------		
;r3 result
;r4 how many chars it gone over
charToInt:
	mov r0, -(sp)
	mov r1, -(sp)
	mov 6(sp), r0						;from array
	clr r1
	clr r3
	clr r4
charLoop:
	inc r4
	cmpb (r0), #'*
	beq charEnd
	mul #8., r3 						;every iteration multiply by 8, r3 used because 3 is odd (it's a mul thing)
	movb (r0)+, r1
	sub #60, r1							;now contains number
	add r1, r3
	br charLoop
charEnd:
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc		
;-------------------------------------------------------------------------------------------------------------------------------	
	
	
	
	
	
;-------------------------------------------------------------------------------------------------------------------------------
;parameter1 by stack - &input_array
;parameter2 inline &Init_B:
rle2st:	
	mov r1, -(sp)
	mov r2, -(sp) 				;sum
	mov r3, -(sp)				;0/1 value to insert, if zero insert zeros, if 1 insert ones
	mov r4, -(sp)				;the value of the current cell (shetat retsafem)
	mov (r5)+, r0				;Init_B - read
	mov  10.(sp), r1			;input_array - write
	clr r2						;initialize sum to 0	
	clr r3						;start writing zeros
	
	cmpb (r0), #0.				;if first value in array of retsafem is zero, then start putting ones in output array
	bne loop_r
	mov #1., r3					;r3 = value to insert = one here
	inc r0						;how many ones to insert
loop_r:							;loop_r would operate untill all writing to array is finished
	cmpb (r0), #0.				;if there's a zero not in the start of the array, array is invalid
	beq invalid_Init_B
	clr r4
	movb (r0)+, r4				;r4 = block size to write to
	bic #177400, r4
bp:
	add r4, r2
	cmp r2, #144.
	bgt invalid_Init_B			;if there is no sum of 144 then array is invalid
wr_loop:						;wr_loop job is to write one block of retsafem to output
	movb r3, (r1)+				
	sob r4, wr_loop				;ends when writes a block
	cmp r3, #0.					
	beq set_one					;exchange the block value to set
	clr r3						;write a block of zeros
	br skip_set	
set_one:
	mov #1., r3					;write a block of ones
skip_set:
	cmp r2, #144.				;while there's no value that the sum till now isn't 144
	bne loop_r
	mov #1., r0					;output that it is valid
	br skip_r
invalid_Init_B:
	clr r0
skip_r:							;restore registers
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts r5
;-------------------------------------------------------------------------------------------------------------------------------
	




	
;----Variables---------------------------------------------------------------------------------------------------------------
index: .word 0
player1Name: .blkw 11.					;20 chars + *
player2Name: .blkw 11.
gameLen: .blkw 5.						; 1->1000 + *
intGameLen: .word 0
maxGen: .blkw 5.						;1->1000 + *
intMaxGen: .word 0
is_star: .word 0
answer: .byte 0
.even
inputBoard: .blkw 40.					; 3 max + , * 20
Init_A: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0		;a zero after it to not get out of memory
		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
.even	
numBytes: .word 0
secNum: .word 0
ticksNum: .word 0
move: .blkw 2
intMove: .word 0
stBoard: .blkw 72.
outputBoard: 	.blkw 72.
;-------------------------------------------------------------------------------------------------------------------------------




;----Strings-----------------------------------------------------------------------------------------------------------------
str1: .ascii <Please enter first player name:\n*>
str2: .ascii <Please enter game length in seconds:\n*>
str3: .ascii <Please enter maximum number of generations:\n*>
str4: .ascii <Start with Init_B board ?\n*>
str5: .ascii <Please enter your own board:\n*>
str5Err: .ascii <The board is illegal please try again.\n*>
str6: .ascii <Please enter second player name:\n*>
strTime: .ascii <Total time: *>
strSec: .ascii < sec*>
strGen: .ascii <Maximum generations: *>
strPrs: .ascii <Press any key...*>
strCur: .ascii <Current Board:\n*>
strMv: .ascii <Please enter your move:\n*>
strIM: .ascii <Illegal move.\n*>
strE11: .ascii <Time is up *>
strE22: .ascii <! *>
strE13: .ascii < won!*>
strE21: .ascii <No more generations *>
strS1: .ascii <Well done *>
strS2: .ascii <, you won.*>
;-------------------------------------------------------------------------------------------------------------------------------




;--Variables for next_gen - taken from exercise 2-----------------------------------------------------------------
.even
arr_in:			.word 0
arr_out:		.word 0
is_alive: 		.word 0 
offset: 		.word 0
inputN: 			.word 0
outputN: 		.word 0			
;-------------------------------------------------------------------------------------------------------------------------------







;-------------------------------------------------------------------------------------------------------------------------------
;							          PROGRAM END
;-------------------------------------------------------------------------------------------------------------------------------